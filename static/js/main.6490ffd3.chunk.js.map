{"version":3,"sources":["components/form/Form.jsx","components/todo/Todo.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Form","state","text","handelChange","event","setState","target","name","value","hendelSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","className","placeholder","onChange","Component","style","textDecoration","todo","onClick","toggleComplite","deleteTodo","App","todos","todoShowAll","addTodo","map","upInfoAboutTodo","str","hendeleDeleteTodo","filter","hendeleRemoveAllCompleteTodo","display","some","length","Todo","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6490ffd3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport shortid from \"shortid\";\r\nimport \"./form.scss\";\r\n\r\nexport default class Form extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  state = {\r\n    text: \"\",\r\n  };\r\n\r\n  handelChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  hendelSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      text: this.state.text,\r\n      complete: false,\r\n      // для id использовала библиотеку shortid\r\n    });\r\n    this.setState({\r\n      text: \"\",\r\n    });\r\n    //submit form\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.hendelSubmit}>\r\n          <div className=\"form__wrapper\">\r\n            <div className=\"input__wrapper\">\r\n              <input\r\n                className=\"form__input\"\r\n                placeholder=\" Please, add task! :)\"\r\n                name=\"text\"\r\n                value={this.state.text} //получила состояние инпута\r\n                onChange={this.handelChange}\r\n              />\r\n            </div>\r\n            <button className=\"primary__btn\">Add </button>\r\n            {/* кнопка срабатывает , потомушто на ней по дефолту submit есть,   можно добавить и клик , пока не вижу смысла , все работает) */}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./todo.scss\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"todo__complete-wrapper\">\r\n        <div\r\n          className=\"todo__complete\"\r\n          style={{\r\n            textDecoration: props.todo.complete ? \"line-through\" : \"\",\r\n          }}\r\n          onClick={props.toggleComplite}\r\n        >\r\n          {props.todo.text}\r\n        </div>\r\n        <button\r\n          className=\"primary__btn primary__btn--delete\"\r\n          onClick={props.deleteTodo}\r\n        >\r\n          delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.scss\";\nimport Form from \"./form/Form.jsx\";\nimport Todo from \"./todo/Todo.jsx\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    todos: [],\n    todoShowAll: \"all\",\n  };\n  addTodo = (todo) => {\n    this.setState({\n      todos: [todo, ...this.state.todos],\n    });\n  };\n\n  toggleComplite = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            // можно заменить на ...todo, complete: !todo.complete, просто скопирует все что без изменений, и довавит только одно изменение в complete\n            ...todo,\n            complete: !todo.complete,\n          };\n        } else {\n          return todo;\n        }\n      }),\n    });\n  };\n\n  upInfoAboutTodo = (str) => {\n    this.setState({\n      todoShowAll: str,\n    });\n  };\n\n  hendeleDeleteTodo = (id) => {\n    this.setState({\n      todos: this.state.todos.filter((todo) => todo.id !== id),\n    });\n  };\n\n  hendeleRemoveAllCompleteTodo = () => {\n    this.setState({\n      todos: this.state.todos.filter((todo) => {\n        if (!todo.complete) {\n          todo.style = {\n            display: \"none\",\n          };\n        }\n      }),\n    });\n  };\n\n  render() {\n    let todo = [];\n    if (this.state.todoShowAll === \"all\") {\n      todo = this.state.todos;\n    } else if (this.state.todoShowAll === \"active\") {\n      todo = this.state.todos.filter((todo) => !todo.complete);\n    } else if (this.state.todoShowAll === \"complete\") {\n      todo = this.state.todos.filter((todo) => todo.complete);\n    }\n    return (\n      <div className=\"app\">\n        <h1>Todos list</h1>\n        <div className=\"app__btn-wrapper\">\n          <button\n            className=\"primary__btn\"\n            onClick={() => {\n              this.upInfoAboutTodo(\"all\");\n            }}\n          >\n            all\n          </button>\n          <button\n            className=\"primary__btn\"\n            onClick={() => {\n              this.upInfoAboutTodo(\"active\");\n            }}\n          >\n            active\n          </button>\n          <button\n            className=\"primary__btn\"\n            onClick={() => {\n              this.upInfoAboutTodo(\"complete\");\n            }}\n          >\n            complete\n          </button>\n        </div>\n        <div className=\"wrapper__btn--remove\">\n          {this.state.todos.some((todo) => todo.complete) ? (\n            <button\n              className=\"primary__btn \"\n              onClick={() => this.hendeleRemoveAllCompleteTodo()}\n            >\n              remove all complete\n            </button>\n          ) : null}\n        </div>\n        <div>\n          You need todo:{\" \"}\n          {this.state.todos.filter((todo) => !todo.complete).length}\n        </div>\n        <Form onSubmit={this.addTodo} />\n        {todo.map((todo) => (\n          <Todo\n            toggleComplite={() => this.toggleComplite(todo.id)}\n            deleteTodo={() => this.hendeleDeleteTodo(todo.id)}\n            id={todo.id}\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}